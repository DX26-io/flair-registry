pool:
  vmImage: 'Ubuntu 16.04'

trigger:
  # batch: true
  branches:
    include:
    - master
    - feature/*
    - bug/*

pr:
  branches:
    include:
    - master

steps:
- checkout: self
  persistCredentials: true

- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.6
    architecture: 'x64'

- script: |
    python --version
    pip --version
    pip install awscli
  displayName: 'Environment Preperation'

- script: |
    mkdir .tmp
    cd .tmp
    aws s3 cp s3://vizcentric-pipeline-secrets/settings.xml .
    mkdir ~/.m2
    cp ./settings.xml ~/.m2/settings.xml
    cd ../
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  displayName: 'Get Secrets'

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    goals: 'package'
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
  displayName: 'Compile, Test & Package the artifact'

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    goals: 'deploy'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  displayName: 'Compile, Test, Package & Deploy the artifact'

- script: |
    python -version
    pip install wheel setuptools PyYAML psycopg2 boto3 requests avro-python3 confluent_kafka
    python setup.py sdist bdist_wheel
  displayName: 'Build wheel'

- script: |
    export $(grep -v '^#' ./target/maven-archiver/pom.properties | xargs)
  displayName: 'Export properties from maven'

- script: |
    docker build -t flairbi/$(artifactId):v$(version) .
  displayName: 'Build Docker image'

- script: |
    docker login -u vizcentric -p $DOCKER_PASSWORD
    docker push flairbi/$(artifactId):v$(version)
    docker tag flairbi/$(artifactId):v$(version) flairbi/$(artifactId):latest
    docker push flairbi/$(artifactId):latest
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  env:
    DOCKER_PASSWORD: $(dockerPassword)
  displayName: 'Push Docker image'